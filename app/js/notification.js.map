{"version":3,"sources":["../../node_modules/blingblingjs/src/index.js","notification.js"],"names":["sugar","on","names","fn","split","forEach","name","addEventListener","off","removeEventListener","attr","val","undefined","getAttribute","removeAttribute","setAttribute","$","query","$context","document","$nodes","NodeList","Array","isArray","HTMLElement","SVGElement","querySelectorAll","Object","length","assign","from","map","$el","attrs","entries","key","popup","toggle","badge","url","notifications","cssKeys","hide","markAllAsRead","items","localStorage","notification","id","createList","html","step","style","title","innerHTML","toggleBadge","every","includes","classList","remove","handleLoad","fetch","then","data","json","handleClickOnPopup","e","target","contains","handleClickOnToggle","preventDefault","status","window"],"mappings":"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","file":"notification.js","sourceRoot":"../../src/js","sourcesContent":["const sugar = {\n  on: function(names, fn) {\n    names\n      .split(' ')\n      .forEach(name =>\n        this.addEventListener(name, fn))\n    return this\n  },\n  off: function(names, fn) {\n    names\n      .split(' ')\n      .forEach(name =>\n        this.removeEventListener(name, fn))\n    return this\n  },\n  attr: function(attr, val) {\n    if (val === undefined) return this.getAttribute(attr)\n\n    val == null\n      ? this.removeAttribute(attr)\n      : this.setAttribute(attr, val || '')\n      \n    return this\n  }\n}\n\nexport default function $(query, $context = document) {\n  let $nodes = query instanceof NodeList || Array.isArray(query)\n    ? query\n    : query instanceof HTMLElement || query instanceof SVGElement\n      ? [query]\n      : $context.querySelectorAll(query)\n\n  if (!$nodes.length) $nodes = []\n\n  return Object.assign(\n    Array.from($nodes).map($el => Object.assign($el, sugar)), \n    {\n      on: function(names, fn) {\n        this.forEach($el => $el.on(names, fn))\n        return this\n      },\n      off: function(names, fn) {\n        this.forEach($el => $el.off(names, fn))\n        return this\n      },\n      attr: function(attrs, val) {\n        if (typeof attrs === 'string' && val === undefined)\n          return this[0].attr(attrs)\n\n        else if (typeof attrs === 'object') \n          this.forEach($el =>\n            Object.entries(attrs)\n              .forEach(([key, val]) =>\n                $el.attr(key, val)))\n\n        else if (typeof attrs == 'string' && (val || val == null || val == ''))\n          this.forEach($el => $el.attr(attrs, val))\n\n        return this\n      }\n    }\n  )\n}\n","import $ from 'blingblingjs';\n\nconst [popup] = $('.js-notification-popup');\nconst [toggle] = $('.js-notification-toggle');\nconst [badge] = $('.js-notification-badge');\nconst url = 'json/notifications.html';\nlet notifications = [];\nconst cssKeys = {\n    hide: 'd-none',\n};\n\nconst markAllAsRead = (items) => {\n    localStorage.notifications = items.map((notification) => notification.id);\n};\n\nconst createList = (items) => {\n    let html = '';\n    let step = 1;\n    // create notification\n    items.forEach((notification) => {\n        // set default style\n        let style = 'pb-3 mb-3 border-bottom border-bcolor';\n        // last item? no style\n        if (items.length === step) {\n            style = '';\n        }\n        // create notification HTML\n        html += `<li>\n            <a href=\"${notification.url}\" class=\"notification-link d-block ${style} js-notification-link\">${notification.title}</a>\n        </li>`;\n        // increment step\n        step += 1;\n    });\n    // append notification to wrapper\n    popup.innerHTML = html;\n    // save notifications\n    notifications = items;\n};\n\nconst toggleBadge = (items) => {\n    // first visit? show badge\n    if (localStorage.notifications === undefined) {\n        badge.classList.remove(cssKeys.hide);\n        return;\n    }\n    // are there new notifications?\n    const areAllRead = items.every((notification) => localStorage.notifications.includes(notification.id));\n    // no new notifications\n    if (areAllRead) return;\n    // show badge\n    badge.classList.remove(cssKeys.hide);\n};\n\nconst handleLoad = () => {\n    // fetch new data\n    fetch(url)\n        .then((data) => data.json())\n        .then((items) => {\n            // create list\n            createList(items);\n            // toggle notification badge\n            toggleBadge(items);\n        });\n};\n\nconst handleClickOnPopup = (e) => {\n    // click on link?\n    if (!e.target.classList.contains('js-notification-link')) return;\n    // mark all notifications as read\n    markAllAsRead(notifications);\n};\n\nconst handleClickOnToggle = (e) => {\n    // stop default action\n    e.preventDefault();\n    // open/close link\n    const status = toggle.getAttribute('aria-expanded') === 'true';\n    toggle.setAttribute('aria-expanded', !status);\n    // open/close popup\n    popup.classList.toggle(cssKeys.hide);\n};\n\ntoggle.on('click', handleClickOnToggle);\nwindow.addEventListener('load', handleLoad);\npopup.on('click', handleClickOnPopup);\n"]}